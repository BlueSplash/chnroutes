#summary 使用方法
#labels Featured,Phase-Deploy
= 介绍 =
这几个脚本主要利用来自 [http://ftp.apnic.net/apnic/dbase/data/country-ipv4.lst] 的数据生成路由命令脚本, 让vpn客户端在进行连接的时候自动执行. 通过这些路由脚本, 可以让用户在使用vpn作为默认网络网关的时候, 不使用vpn进行对中国国内ip的访问, 从而减轻vpn的负担, 和增加访问国内网站的速度.

= 基本约定 =

在使用这些脚本之前, 请确保你在自己的电脑上已经成功配置好一个vpn连接(pptp 或者 openvpn), 并且让之以默认网络网关的方式运行, 这通常也是默认配置, 即vpn接入之后所有网络流量都通过vpn进行.

= Mac OSX =
===openvpn===
(这里假定用户使用Tunnelblick作为openvpn客户端)
  # 下载 chnroutes_ovpn_mac
  # 从终端进入下载目录, 执行`python chnroutes_ovpn_mac`, 执行完毕之后同一目录下将生成两个新文件'vpnup'和'vpndown'
  # 在终端里运行命令 `chmod a+x vpnup vpndown` 把这两个文件设置为可执行
  # 把这两个文件copy到openvpn的配置目录并修过openvpn配置文件, 在末尾加上两句:
    {{{
    up vpnup
    down vpndown
    }}}
  # 设置完毕, 重连openvpn. 你可以通过`netstat -nr`命令的输出来确认vpnup/vpndown 是否正确执行. 在连接之后, 使用上述命令, 如果能看到大量的输出则表明路由表已经被成功设置, 断开连接之后, 再执该命令则可以看到断开前的那些输出已经消失.

进一步的测试, 你可以使用 route 命令进行, 如执行 `route get 8.8.8.8`, 这里8.8.8.8是google dns的ip, 位置在国外. 你可以看到在输出结果的gateway字段与vpn的网关一致; 再尝试`route get 202.96.134.133` 这里202.96.134.133是一个国内的ip, 这时候输出结果的gateway将变成与没连接vpn之前的网关.

需要注意的是, 默认情况下, 在Tunnelblick上不能选取Set nameserver选项, 否则这两个脚本将不能被调用. 但对于需要使用该功能的用户, 你可以使用在本项目下载页面提供的补丁文件, 让tunnelblick可以同时支持定制启动脚本. 使用方法, 在Terminal里 进入tunnelblick的Resources目录. 如我这里 Tunnelblick是在 /Applications里, 使用如下命令: 
{{{
cd /Applications/Tunnelblick.app/Contents/Resources
patch -p1 < path_to_the_patch_file
}}}
打过补丁之后, Tunnelblick的set nameserver 功能就可以与up/down script一起使用了. 另外打补丁之前要注意Tunnelblick的版本号必须是 v3.0b24(最新)

===pptp===
  # 下载 chnroutes_pptp_mac
  # 从终端进入下载目录, 执行`python chnroutes_pptp_mac`, 执行完毕之后同一目录下将生成两个新文件'ip-up'和'ip-down'
  # 把这两个文件copy到 /etc/ppp 目录, 并使用 `sudo chmod a+x ip-up ip-down`命令把它们设置为可执行
  # 设置完毕, 重新连接vpn. 测试步骤同上.

= Linux =
===openvpn===
  # 下载 chnroutes_ovpn_linux
  # 从终端进入下载目录, 执行`python chnroutes_ovpn_linux`, 执行完毕之后同一目录下将生成两个新文件'vpnup'和'vpndown'
  # 在终端里运行命令 `chmod a+x vpnup vpndown` 把这两个文件设置为可执行
  # 把这两个文件copy到openvpn的配置目录并修过openvpn配置文件, 在末尾加上两句:
    {{{
    up vpnup
    down vpndown
    }}}
  # 设置完毕, 重连openvpn.  测试方法同mac osx, 但需要使用 `ip route` 代替mac上的 `route get` 命令
===pptp===
使用跟openvpn_linux相同的生成脚本, 区别是把生成的vpnup文件改名为 ip-pre-up, 并把ip-pre-up 拷贝到 /etc/ppp目录, vpndown 拷贝到 /etc/ppp/ip-down.d 目录. 测试步骤同上.

= Windows =
===openvpn===
  # 下载 chnroutes_ovpn_win 文件
  # 对于已经安装有python的用户, 在命令行方式进入到下载到的文件所在目录, 执行`python chnroutes_ovpn_win`, 执行完毕之后同一目录下将生成'vpnup.bat', 'vpnup.vbs', 'vpndown.bat'和'vpndown.vbs'共四个文件. (如果你没有python, 可以直接下载项目下载页面上的pre_created_for_win.zip文件, 解开之后你将能得到预生成的上述4个文件)
  # 把上述的四个新生成的文件copy到openvpn配置文件所在的目录
  # 编辑openvpn配置文件, 在末尾加上以下三句:
    {{{
    script-security 2
    up vpnup.vbs
    down vpndown.vbs
    }}}
    这里的第一句的目的是保证有足够的安全级别可以让openvpn调用自定义脚本, 第二句up是连接openvpn之后自动调用路由添加脚本, 第三句是用来在openvpn断开之后自动清理之前添加上的路由信息.
  # 设置完毕, 重连openvpn. 你可以分别进入 http://www.cz88.net/ 和 http://whatismyipaddress.com/ 这两个网站, 如果配置正确, 在cz88网站上你将看到你的ip显示为连接vpn之前的公网ip, 而另外一个网站则显示为你的vpn服务器的公网ip. (需要注意的是vpnup.vbs其实是调用了vpnup.bat文件, 这个bat文件大概需要1分钟的时间才能完全添加所有路由信息. 也就是说在openvpn-gui显示连接已经完成的时候, 该bat文件还在执行中)


对于使用项目下载页面里的预生成的bat文件的用户, 这些预生成的文件将会不定期进行更新, 因为ipv4的范围的变化不会十分大, 所以路由信息文件应该不需要频繁更新.
===pptp===
文件生成/获取方式同上, 但由于windows上的pptp不支持拨号脚本, 所以也只能在进行拨号之前手动执行vpnup.bat文件以设置路由表. 而在断开vpn之后, 如果你觉得有必要, 可以运行vpndown.bat把这些路由信息给清理掉.

= Android = 
===openvpn===
  # 下载 chnroutes_ovpn_android 文件到任意安装有python环境的机器上
  # 在命令行里进入下载目录, 执行`python chnroutes_ovpn_android`, 这讲生成'vpnup.sh'和'vpndown.sh'两个文件.
  # 把步骤2生成的两个文件拷贝到 android 的 /sdcard/openvpn/目录下, 然后修改openvpn配置文件, 在文件中加上以上三句:
    {{{
    script-security 2
    up "/system/bin/sh /sdcard/openvpn/vpnup.sh"
    down "/system/bin/sh /sdcard/openvpn/vpndown.sh"
    }}}
    注意自行修改其中的路径以符合你的android rom的实际路径


另外, 这里假定了你的android已经安装过busybox, 否则请先安装busybox再进行以上操作, 还需要知道的是, 这个脚本在手机上执行会花费比较长的时间, 如非必要, 就不要用了. 也许采用非redirect-gateway方式, 然后在ovpn配置文件里添加几条需要路由的ip段是比较快捷方便的做法.

==信息反馈==
本项目的脚本都是在使用路由器进行拨号的情况下测试通过的, 如果在其它拨号方式下, 脚本不能运作, 请在本页添加comment说明. 或者添加一个新的issue. 另外, 在配合openvpn使用的时候, 可能会出现一种情况是因为网络质量不好, openvpn非主动断开, 这时候vpndown脚本也会被自动调用, 但重新连上之后, 可能会找不到默认的路由而添加失败, 这时候你可以通过停止openvpn重连, 并手动设置好原来的默认路由再重新进行openvpn拨号.